---
version: 0.2
phases:
  install:
    runtime-versions:
#    on-failure: CONTINUE
      python: 3.7
    commands:
      - nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://127.0.0.1:2375 --storage-driver=overlay2&
      - timeout 15 sh -c "until docker info; do echo .; sleep 1; done"
      - curl -sS -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.10.3/2018-07-26/bin/linux/amd64/aws-iam-authenticator
      - curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.27.9/2024-01-04/bin/linux/amd64/kubectl
      # Download the kubectl checksum file
      - curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.27.9/2024-01-04/bin/linux/amd64/kubectl.sha256
      - sha256sum -c kubectl.sha256
      - chmod +x ./kubectl ./aws-iam-authenticator      
      - export PATH=$PWD/:$PATH  
      - python --version
      - echo 'export PATH=$PWD/:$PATH' >> $HOME/.bashrc
      - echo `kubectl version --short --client`
      - python -m pip install --upgrade --force pip
      - wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | apt-key add
      - apt-get update && apt-get -y install jq  && pip install --upgrade awscli pytest
  pre_build:
    commands:
      - TAG="$REPOSITORY_NAME.$REPOSITORY_BRANCH.$ENVIRONMENT_NAME.$(date +%Y-%m-%d.%H.%M.%S).$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)"
      - ls
      - cd deployment
      - sed -i 's@CONTAINER_IMAGE@'"$REPOSITORY_URI:$TAG"'@' deploytment.yaml
      - cat deploytment.yaml
      - $(aws ecr get-login --no-include-email)
      - export KUBECONFIG=$HOME/.kube/config
      # - echo `ls -l`
      # - pip install -r requirements.txt
    # finally:
    #   - python -m venv ~/.devops
    #   - source ~/.devops/bin/activate
    #   - pip install -r requirements.txt
    #   - make install
    #   - make test
    #   - make lint
  build:
    commands:
      - cd ../sources
      - ls
      - docker build --tag $REPOSITORY_URI:$TAG .
  post_build:
    commands:
      - cd ../deployment
      - ls
      - docker push $REPOSITORY_URI:$TAG
      - aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --role-arn $EKS_KUBECTL_ROLE_ARN
#      - kubectl apply -f deployment/aws-auth-cm.yaml
      - kubectl apply -f deploytment.yaml
      - printf '[{"name":"flask-apps","imageUri":"%s"}]' $REPOSITORY_URI:$TAG > build.json
artifacts:
  files: build.json
env:
  parameter-store:         
    JWT_SECRET: JWT_SECRET